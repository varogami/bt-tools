#! /usr/bin/python2
# -*- coding=utf-8 -*-

#bt-tools - tools to interact with some bittorrent sites by commandline
#Copyright (C) 2015-2016 varogami <varogami@altervista.org>

#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.

#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with this program.  If not, see <http://www.gnu.org/licenses/>.


from lib import config
from lib import utils
from lib import common
import sys

class Func:
    def __init__(self):
        self.__conf = config.Config()
        self.__color = self.__conf.getColors()
        self.__json = self.__conf.getJson()
        self.__db = self.__conf.getDb()
        self.__debug = self.__conf.getDebug()
        self.common = common.Func(self.__conf)

    def get_rss(self):
        for name in self.__conf.module.list:
            if self.__conf.module.loadConf(name):
                module_config = self.__conf.module.getModJson(name)                
                #print info
                if module_config['rss']['enabled']:
                    #load module
                    engine = self.__conf.load_mod(name, module_config)
                    for cat in module_config['rss']['feeds']:
                        print self.__color.red
                        url_feed = engine.getFeed(cat)
                        print self.__color.blu + name + " - " + cat + " - feed " + url_feed + self.__color.red
                        self.__db.resetCountNewExtra()
                        for i in engine.list:
                            id = self.__db.insert(name, module_config['url'], i)
                            if self.__db.insert_extra(id, "rss", name):
                                self.common.print_item(id, i, module_config)
                            ##TODO - rss filter
                            ##TODO - rss filter download file torrent
                        engine.list = []
                        self.common.print_footer(name, "feed", self.__db.getCountNewExtra()," new")
                        print
                        ##TODO - generation local rss for site without rss

    def rssls(self, cat):
        self.data.load()
        for i in self.data.root:
            shortname = i.attrib['shortname'].encode('utf8')
            name = i.attrib['name'].encode('utf8')
            url = i.attrib['url'].encode('utf8')
            rsslist = i.xpath("./item[@src='rss'][@type='"+cat+"']")
            
            print config.color_blu + "[ " + name + " ]" + config.color_base
            print config.color_blu + shortname + " - " + url + config.color_base
            print config.color_green + "[ items in rss: " + str(len(rsslist)) + "; showed last: " + str(config.rssLimit) + " ] " + config.color_base
            
            if len(rsslist) > config.rssLimit:
                limit = config.rssLimit
            else:
                limit = len(rsslist)-1

            count=len(rsslist)-1
            while count >= len(rsslist)-limit:
                z = rsslist[count]
                count = count -1

                name = z.find("./key[@name]").text.encode('utf8')
                
                id = z.attrib['id'].encode('utf8')
                type = z.attrib['type'].encode('utf8')
                
                print config.color_magenta + id  + config.color_yellow + " [" + type + "] " + config.color_base +  name
            print
            
    def getRss_old(self, cat, modname):
        engine = self.engines[modname]
        engine.getFeed(cat)
        self.data.insert(engine, "rss", True, not engine.rss_light_download )
        if config.rss_daemon_download_filtered:
            items_to_download = self.data.filter(engine, cat, True)
            if not items_to_download == None:
                for item in items_to_download:
                    if not config.filter_download_file_only:
                        self.download(engine.shortname + "-" + item.id) #not efficent way - but less code
                    else:
                        file_got = engine.get_torrent_file(item, config.download_dir)
                        self.data.add_item_to_filter_coda(item)
                        #if not file_got: # check if downloaded torrent successful
                        #    self.data.add_item_to_filter_coda(item)


    def makeRss(self, cat, modname):
        self.data.exportRssByXml(self.engines[modname], cat)

    def cli(self):
        if self.__conf.checkVersion():
            if len(sys.argv) == 1:
                self.get_rss()
            else:
                self.help()

    def help(self):
        print "use:"
        print "bt-rss"
                        
if __name__ == "__main__":
    do = Func()
    do.cli()
