#!/usr/bin/python2
# -*- coding=utf-8 -*-

#bt-tools - tools to interact with some bittorrent sites by commandline
#Copyright (C) 2015-2016 varogami <varogami@altervista.org>

#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.

#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
from lib import config
from lib import utils
from lib import common

class Func:
    def __init__(self):
        self.__conf = config.Config()
        self.__color = self.__conf.getColors()
        self.__json = self.__conf.getJson()
        self.__db = self.__conf.getDb()
        self.__debug = self.__conf.getDebug()
        self.common = common.Func(self.__conf)

    def search(self, pattern, cat='all'):
        if cat == "cache":
            self.__search_in_db(pattern)
            print self.__color.base 
        elif cat == "hash":
            self.__search_hash_in_db(pattern)
            print self.__color.base
        elif cat == "hashid":
            self.__search_hash_in_db_by_id(pattern)
            print self.__color.base 
        else:
            self.__search(pattern,cat)
            print self.__color.base 
        
    def __search(self, pattern, cat):
        #load all modules config
        for name in self.__conf.module.list:
            if self.__conf.module.loadConf(name):
                module_config = self.__conf.module.getModJson(name)
                #print module info
                print self.__color.blu + name + " - " + module_config['url'] + self.__color.red
                #check if exist catalog type on module
                if cat in module_config['cats']:
                    #load module
                    engine = self.__conf.load_mod(name, module_config)
                    if engine.search(pattern,cat):
                        self.__db.resetCountNew()
                        #print result count
                        print self.__color.green + "[ result " + engine.getCount() + " item ]" + self.__color.base
                        #insert items in db and print them 
                        for i in engine.list:
                            id = self.__db.insert(name, module_config['url'], i)
                            self.common.print_item(id, i, module_config)
                        self.common.print_footer(name, "search", self.__db.getCountNew()," new")
                        print
                    else:
                        print self.__color.red + name + " search error: something not work" + self.__color.base 
                else:
                    self.common.print_warning("warning: \"" + cat + "\" category not in " + name)
            
    def __search_in_db(self, pattern):
        result = self.__db.search_by_name(pattern)
        self.__print_search_in_db(result, "cache")
        
    def __search_hash_in_db(self, hash):
        result = self.__db.search_by_hash(hash)
        self.__print_search_in_db(result, "hash")

    def __search_hash_in_db_by_id(self, id):
        item = self.common.get_item(id)
        if item.hashvalue is None:
            self.common.print_warning("item " + str(item.id) + " not have hashvalue")
        else:
            result = self.__db.search_by_hash(item.hashvalue)
            self.__print_search_in_db(result, "hash")
        
    def __print_search_in_db(self, result, type):
        count=0
        for row in result:
            mod_config = self.__conf.module.getModJson(row[1])
            self.common.print_item_db(row, mod_config)
            count+=1
        self.common.print_footer(type, "search", count, "")
        
    def cli(self):
        if self.__conf.checkVersion():
            if len(sys.argv) == 1:
                self.help()
            elif len(sys.argv) == 2:
                self.search(sys.argv[1])
            elif len(sys.argv) == 3:
                self.search(sys.argv[1],sys.argv[2])
            else:
                self.common.print_error("too much parameter")

    def help(self):
        print "bt-search \"words\"                          - normal search"
        print "bt-search \"words\" [cat]                    - normal search in specific category"
        print "bt-search \"words\" cache                    - search in local db"
        print "bt-search \"hashvalue\" hash                 - search hash value in file cache"
        print "bt-search \"id\" hashid                      - search hash value of item \"id\" in file cache"
        print
        print "use to download search result:"
        print "bt-download ID"
        print "    example: bt-download 1234"
        print
        print "CATEGORY LIST and SUPPORTED MODULES"
        print "cache: " + self.__color.blu + "local search" + self.__color.base
        self.common.lscat()

        
        

if __name__ == "__main__":
    do = Func()
    do.cli()
