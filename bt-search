#! /usr/bin/python
# -*- coding=utf-8 -*-

#bt-tools - tools to interact with some bittorrent sites by commandline
#Copyright (C) 2015-2016 varogami <varogami@altervista.org>

#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.

#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
from lib import config
from lib import utils
from lib import common

class Func:
    def __init__(self):
        self.__conf = config.Config()
        self.__color = self.__conf.getColors()
        self.__json = self.__conf.getJson()
        self.__db = self.__conf.getDb()
        self.__debug = self.__conf.getDebug()
        self.common = common.Func(self.__color, self.__json['module'],self.__debug)
        self.user_agent = self.__json['user_agent']

    def search(self, pattern, cat='all'):
        if cat == "cache":
            self.__search_in_db(pattern)
            print self.__color.base 
        elif cat == "hash":
            self.__search_hash_in_db(pattern)
            print self.__color.base 
        else:
            self.__search(pattern,cat)
            print self.__color.base 
        
    def __search(self, pattern, cat):
        #load all modules config
        for name, module_config in self.__json['module'].iteritems() :
            if module_config['enabled']:
                #print module info
                print self.__color.blu + name + " - " + module_config['url'] + self.__color.red
                #check if exist catalog type on module
                if cat in module_config['cats']:
                    #load module
                    engine = self.__conf.load_mod(name, module_config, self.__conf.getLogDir(), self.user_agent)
                    if engine.search(pattern,cat):
                        self.__db.resetCountNew()
                        #print result count
                        print self.__color.green + "[ result " + engine.getCount() + " item ]" + self.__color.base
                        #insert items in db and print them 
                        for i in engine.list:
                            id = self.__db.insert(name, module_config['url'], i)
                            self.common.print_item(id, i, self.__json, name)
                        self.__print_footer(name, self.__db.getCountNew()," new")
                        print
                    else:
                        print self.__color.red + name + " search error: something not work" + self.__color.base 
                else:
                    print "\"" + cat + "\" category not in " + name    
            
    def __search_in_db(self, pattern):
        result = self.__db.search_by_name(pattern)
        count=0
        for row in result:
            self.common.print_item_db(row, self.__json)
            count+=1
        self.__print_footer("cache", count, "")
        
    def __search_hash_in_db(self, hash):
        print self.__color.green + "SEARCH HASH: " + hash.upper() + self.__color.base
        result = self.__db.search_by_hash(hash)
        count=0
        for row in result:
            self.common.print_item_db(row, self.__json)
            count+=1
        self.__print_footer("hash", count, "")

    def getColors(self):
        return self.__color
            
    def __print_footer(self, name, count, new):
        print self.__color.blu + "end "+ name +" search - " + str(count) + new + " item " +  self.__color.base

        
        
class CLI:
    def __init__(self):
        self.do = Func()
        self.color = self.do.getColors()
        
        if len(sys.argv) == 1:
            self.help()
        elif len(sys.argv) == 2:
            self.do.search(sys.argv[1])
        elif len(sys.argv) == 3:
            self.do.search(sys.argv[1],sys.argv[2])
        else:
            self.do.common.print_error("too much parameter")

    def help(self):
        print "bt-search \"words\"                          - normal search"
        print "bt-search \"words\" [cat]                    - normal search in specific category"
        print "bt-search \"words\" cache                    - search in local db"
        print "bt-search \"words\" hash                     - search hash value in file cache"
        print
        print "use to download search result:"
        print "bt-download ID"
        print "    example: bt-download 1234"
        print
        print "CATEGORY LIST and SUPPORTED MODULES"
        print "cache: " + self.color.blu + "local search" + self.color.base
        self.do.common.lscat()

        
        

if __name__ == "__main__":
    do = CLI()
