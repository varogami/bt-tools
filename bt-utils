#! /usr/bin/python2
# -*- coding=utf-8 -*-

#bt-tools - tools to interact with some bittorrent sites by commandline
#Copyright (C) 2015-2016 varogami <varogami@altervista.org>

#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.

#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with this program.  If not, see <http://www.gnu.org/licenses/>.

from lib import config
from lib import utils
from lib import common
from lib import rssfilter_qbt as qbt
import sys, os



class Func:
    def __init__(self):
        self.__conf = config.Config()
        self.__color = self.__conf.getColors()
        self.__json = self.__conf.getJson()
        self.__db = self.__conf.getDb()
        self.__debug = self.__conf.getDebug()
        self.common = common.Func(self.__conf)
        

    def lscat(self):
        print "CATEGORY LIST and SUPPORTED MODULES"
        print "cache: " + self.__color.blu + "local search" + self.__color.base
        self.common.lscat()
        
    def stats(self):
        NUM_ITEMS=len(self.__conf.module.list)
        print self.__color.green + "[ number of modules: " + str(NUM_ITEMS) + " ]" + self.__color.base

        for module in self.__conf.module.list:
            result = self.__db.search_by_mod(module)
            
            self.__conf.module.loadConf(module)
            module_config = self.__conf.module.getModJson(module)
            url = module_config['url']
            
            print self.__color.magenta + module + " - " + url + self.__color.base
            
            COUNT=0
            list_src = {}
            list_type = {}

            for row in result:
                i = self.common.build_item(row)
                COUNT=COUNT+1
                name = i.name
                src = "TODO"
                type = i.type
                
                if src in list_src:
                    SC = list_src[src]
                    SC = SC + 1
                    list_src[src] = SC
                else:
                    list_src[src] = 1

                if type in list_type:
                    TC = list_type[type]
                    TC = TC + 1
                    list_type[type] = TC
                else:
                    list_type[type] = 1

                    
            print self.__color.yellow + "total items: " + self.__color.base + str(COUNT) 
            print self.__color.yellow + "items by source:" + self.__color.base
            for key, value in list_src.items():
                print "  " + self.__color.blu + str(key) + " " + self.__color.base + str(value)
            print self.__color.yellow + "items by type:" + self.__color.base
            for key, value in list_type.items():
                print "  " + self.__color.blu + self.common.getCategory(module_config, key) + " " + self.__color.base + str(value)
            print
        
    def lsmod(self):
        for module in self.__conf.module.list:
            self.__conf.module.loadConf(module)
            module_config = self.__conf.module.getModJson(module)
            keylist = []

            for key, value in module_config['cats'].iteritems():
                keylist.append(key)
            keylist.sort()
            keystring = ""
            for key in keylist:
                    keystring = keystring + " " + key
                    
            print "name:    " + self.__color.blu + module + self.__color.base
            print "url:     " + self.__color.blu + module_config['url'] + self.__color.base
            print "cats:   " + self.__color.blu +  keystring + self.__color.base
            print


    def import_qbt_filters(self, filename = None):
        if filename is None:
            do = qbt.Func(self.__conf.getFilterDir(), self.__debug)
            do.write_rules()
        else:
            if os.path.isfile(filename):
                print "+read qbittorrent filter file " + filename
                do = qbt.Func(self.__conf.getFilterDir(), self.__debug)
                do.write_rules(filename)
            else:
                self.common.print_error(filename + " not exist")

    def cli(self):
        if len(sys.argv) == 1:
            self.help()
        elif len(sys.argv) == 2:
            if sys.argv[1] == "export":
                pass
            elif sys.argv[1] == "import_qbfilter":
                self.import_qbt_filters()
            elif sys.argv[1] == "lsmod":
                self.lsmod()
            elif sys.argv[1] == "help":
                self.help()
            elif sys.argv[1] == "stats":
                self.stats()
            elif sys.argv[1] == "lscat":
                self.lscat()
            elif sys.argv[1] == "delitem":
                pass
            elif sys.argv[1] == "import":
                pass
            else:
                self.common.print_error("bad parameter: " + sys.argv[1])
        elif len(sys.argv) == 3:
            if sys.argv[1] == "import_qbfilter":
                self.import_qbt_filters(sys.argv[2])
            else:
                self.common.print_error("bad parameter: " + sys.argv[1])
        else:
            self.common.print_error("too mach parameter")
            
    def help(self):
        print "bt-utils help                         - print this help"
        print "bt-utils lsmod                        - list modules info"
        print "bt-utils lscat                        - list categories info"
        print "bt-utils import_qbfilter              - import qbittorrent filters from config dir"
        print "bt-utils import_qbfilter filename     - import qbittorrent filters file"
        print "bt-utils export                       - export db to json"
        print "bt-utils stats"
        print
        print "TODO"
        print "bt-utils delitem ID                   - delete specific item on database"
        print "bt-utils import                       - import db from json"

if __name__ == "__main__":
    do = Func()
    do.cli()
